!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CameraPoseEstimation	CameraPoseEstimation.cpp	/^	CameraPoseEstimation::CameraPoseEstimation()$/;"	f	class:sun::CameraPoseEstimation	signature:()
CameraPoseEstimation_PlaneParas	CameraPoseEstimation_PlaneParas.cpp	/^	CameraPoseEstimation_PlaneParas::CameraPoseEstimation_PlaneParas()$/;"	f	class:sun::CameraPoseEstimation_PlaneParas	signature:()
CameraPoseEstimation_ShadowSM	CameraPoseEstimation_ShadowSM.cpp	/^	CameraPoseEstimation_ShadowSM::CameraPoseEstimation_ShadowSM()$/;"	f	class:sun::CameraPoseEstimation_ShadowSM	signature:()
Cells_bottom	PlaneExtraction.cpp	/^	Cells_bottom::Cells_bottom(int theta, int phy, int d)$/;"	f	class:sun::Cells_bottom	signature:(int theta, int phy, int d)
CenterWeight	PlaneFilter.cpp	/^	double PlaneFilter::CenterWeight(Pixel index)$/;"	f	class:sun::PlaneFilter	signature:(Pixel index)
Clear	PlaneMatching_Interptree.cpp	/^	void InterpTree::Clear()$/;"	f	class:sun::InterpTree	signature:()
ColorFilter	PlaneFilter.cpp	/^	void PlaneFilter::ColorFilter()$/;"	f	class:sun::PlaneFilter	signature:()
ColorResponse	PlaneFilter.cpp	/^	double PlaneFilter::ColorResponse(Pixel index, Eigen::MatrixXd temp_color)$/;"	f	class:sun::PlaneFilter	signature:(Pixel index, Eigen::MatrixXd temp_color)
ComputeCellAttribute	PlaneExtraction.cpp	/^	void Cells_bottom::ComputeCellAttribute(Eigen::Matrix3d Rotation2eigen)$/;"	f	class:sun::Cells_bottom	signature:(Eigen::Matrix3d Rotation2eigen)
Construct	PlaneMatching_Interptree.cpp	/^	bool InterpTree::Construct(std::vector<Plane*> &planes_ref_,std::vector<Plane*> &planes_cur_)$/;"	f	class:sun::InterpTree	signature:(std::vector<Plane*> &planes_ref_,std::vector<Plane*> &planes_cur_)
DataReading	DataReading.cpp	/^	DataReading::DataReading(const std::string f): freiburg(f)$/;"	f	class:sun::DataReading	signature:(const std::string f)
DensityFilter	PlaneFilter.cpp	/^	void PlaneFilter::DensityFilter()$/;"	f	class:sun::PlaneFilter	signature:()
DensityResponse	PlaneFilter.cpp	/^	double PlaneFilter::DensityResponse(Pixel index, Eigen::MatrixXd temp_density)$/;"	f	class:sun::PlaneFilter	signature:(Pixel index, Eigen::MatrixXd temp_density)
DepthWeight	PlaneFilter.cpp	/^	double PlaneFilter::DepthWeight(Pixel index)$/;"	f	class:sun::PlaneFilter	signature:(Pixel index)
EdgeFilter	PlaneFilter.cpp	/^	void PlaneFilter::EdgeFilter()$/;"	f	class:sun::PlaneFilter	signature:()
EdgeResponse	PlaneFilter.cpp	/^	double PlaneFilter::EdgeResponse(Pixel index, Eigen::MatrixXd temp_edge)$/;"	f	class:sun::PlaneFilter	signature:(Pixel index, Eigen::MatrixXd temp_edge)
EularAngles2Rotation	Basics.cpp	/^	void EularAngles2Rotation(Eigen::Vector3d &Eulars, Eigen::Matrix3d &Rotation)$/;"	f	namespace:sun	signature:(Eigen::Vector3d &Eulars, Eigen::Matrix3d &Rotation)
ExtractPlanes	PlaneExtraction_RANSAC.cpp	/^	void PlaneExtraction_RANSAC::ExtractPlanes()$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:()
Initialize_freiburg	DataReading.cpp	/^	void DataReading::Initialize_freiburg(double time_start)$/;"	f	class:sun::DataReading	signature:(double time_start)
InterpTree	PlaneMatching_Interptree.cpp	/^	InterpTree::InterpTree()$/;"	f	class:sun::InterpTree	signature:()
LoadData_freiburg	DataReading.cpp	/^	void DataReading::LoadData_freiburg()$/;"	f	class:sun::DataReading	signature:()
LoadPoints	PlaneExtraction.cpp	/^	bool PlaneExtraction::LoadPoints()$/;"	f	class:sun::PlaneExtraction	signature:()
MapIncremental	MapIncremental.cpp	/^	MapIncremental::MapIncremental()$/;"	f	class:sun::MapIncremental	signature:()
Match	PlaneMatching_Interptree.cpp	/^	void PlaneMatching_Interptree::Match(std::vector<PlanePair> &matched_planes)$/;"	f	class:sun::PlaneMatching_Interptree	signature:(std::vector<PlanePair> &matched_planes)
Node_InterpTree	PlaneMatching_Interptree.cpp	/^	Node_InterpTree::Node_InterpTree()$/;"	f	class:sun::Node_InterpTree	signature:()
Node_InterpTree	PlaneMatching_Interptree.cpp	/^	Node_InterpTree::Node_InterpTree(Plane *plane_ref_, Plane *plane_cur_)$/;"	f	class:sun::Node_InterpTree	signature:(Plane *plane_ref_, Plane *plane_cur_)
PlaneExtraction_RANSAC	PlaneExtraction_RANSAC.cpp	/^	PlaneExtraction_RANSAC::PlaneExtraction_RANSAC()$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:()
PlaneFilter	PlaneFilter.cpp	/^	PlaneFilter::PlaneFilter()$/;"	f	class:sun::PlaneFilter	signature:()
PlaneMatching	PlaneMatching.cpp	/^	PlaneMatching::PlaneMatching()$/;"	f	class:sun::PlaneMatching	signature:()
PlaneMatching_Interptree	PlaneMatching_Interptree.cpp	/^	PlaneMatching_Interptree::PlaneMatching_Interptree()$/;"	f	class:sun::PlaneMatching_Interptree	signature:()
Pose2AlignPlanes	CameraPoseEstimation_PlaneParas.cpp	/^	void CameraPoseEstimation_PlaneParas::Pose2AlignPlanes()$/;"	f	class:sun::CameraPoseEstimation_PlaneParas	signature:()
Rotation2EularAngles	Basics.cpp	/^	void Rotation2EularAngles(Eigen::Matrix3d &Rotation, Eigen::Vector3d &Eulars)$/;"	f	namespace:sun	signature:(Eigen::Matrix3d &Rotation, Eigen::Vector3d &Eulars)
SampleDataset_freiburg	DataReading.cpp	/^	void DataReading::SampleDataset_freiburg()$/;"	f	class:sun::DataReading	signature:()
SortCells	PlaneExtraction.cpp	/^	void Cells_bottom::SortCells()$/;"	f	class:sun::Cells_bottom	signature:()
WhatCauseShadow	CameraPoseEstimation_ShadowSM.cpp	/^	void CameraPoseEstimation_ShadowSM::WhatCauseShadow()$/;"	f	class:sun::CameraPoseEstimation_ShadowSM	signature:()
addScan	MapIncremental.cpp	/^	void MapIncremental::addScan(pcl::PointCloud<pcl::PointXYZRGBA>::Ptr point_cloud, CameraPose Rt)$/;"	f	class:sun::MapIncremental	signature:(pcl::PointCloud<pcl::PointXYZRGBA>::Ptr point_cloud, CameraPose Rt)
color2grey	PlaneFilter.cpp	/^	void PlaneFilter::color2grey()$/;"	f	class:sun::PlaneFilter	signature:()
computePlaneAvgCov	PlaneExtraction_RANSAC.cpp	/^	void PlaneExtraction_RANSAC::computePlaneAvgCov(Plane *plane)$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:(Plane *plane)
computePlaneParas	PlaneExtraction.cpp	/^	void PlaneExtraction::computePlaneParas(Plane *plane)$/;"	f	class:sun::PlaneExtraction	signature:(Plane *plane)
compute_H	CameraPoseEstimation.cpp	/^	void CameraPoseEstimation::compute_H()$/;"	f	class:sun::CameraPoseEstimation	signature:()
consistent_1	PlaneMatching_Interptree.cpp	/^	bool InterpTree::consistent_1(Node_InterpTree *node)$/;"	f	class:sun::InterpTree	signature:(Node_InterpTree *node)
consistent_2	PlaneMatching_Interptree.cpp	/^	bool InterpTree::consistent_2(Node_InterpTree *node1, Node_InterpTree *node2)$/;"	f	class:sun::InterpTree	signature:(Node_InterpTree *node1, Node_InterpTree *node2)
consistent_3	PlaneMatching_Interptree.cpp	/^	bool InterpTree::consistent_3(Node_InterpTree *node1, Node_InterpTree *node2, Node_InterpTree *node3)$/;"	f	class:sun::InterpTree	signature:(Node_InterpTree *node1, Node_InterpTree *node2, Node_InterpTree *node3)
constraint_case	CameraPoseEstimation.cpp	/^	CameraPoseEstimation::ConstraintCase CameraPoseEstimation::constraint_case()$/;"	f	class:sun::CameraPoseEstimation	signature:()
dist_point2plane	PlaneExtraction_RANSAC.cpp	/^	double PlaneExtraction_RANSAC::dist_point2plane(Eigen::Vector3d point, pcl::ModelCoefficients::Ptr plane)$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:(Eigen::Vector3d point, pcl::ModelCoefficients::Ptr plane)
filter	PlaneFilter.cpp	/^	void PlaneFilter::filter(Plane *plane)$/;"	f	class:sun::PlaneFilter	signature:(Plane *plane)
fusePlanes	PlaneExtraction_RANSAC.cpp	/^	void PlaneExtraction_RANSAC::fusePlanes(int i_plane, Plane *tmp_plane)$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:(int i_plane, Plane *tmp_plane)
insertChild	PlaneMatching_Interptree.cpp	/^	void Node_InterpTree::insertChild(Node_InterpTree *node)$/;"	f	class:sun::Node_InterpTree	signature:(Node_InterpTree *node)
isLeaf	PlaneMatching_Interptree.cpp	/^	bool InterpTree::isLeaf(Node_InterpTree *node)$/;"	f	class:sun::InterpTree	signature:(Node_InterpTree *node)
loadDepthMap	CameraPoseEstimation_ShadowSM.cpp	/^	void CameraPoseEstimation_ShadowSM::loadDepthMap(pcl::PointCloud<pcl::PointXYZRGBA>::Ptr point_cloud)$/;"	f	class:sun::CameraPoseEstimation_ShadowSM	signature:(pcl::PointCloud<pcl::PointXYZRGBA>::Ptr point_cloud)
loadPlane	PlaneFilter.cpp	/^	void PlaneFilter::loadPlane(Plane *plane)$/;"	f	class:sun::PlaneFilter	signature:(Plane *plane)
loadPlanes	PlaneMatching.cpp	/^	void PlaneMatching::loadPlanes(std::vector<Plane*> _planes_ref, std::vector<Plane*> _planes_cur)$/;"	f	class:sun::PlaneMatching	signature:(std::vector<Plane*> _planes_ref, std::vector<Plane*> _planes_cur)
normal2pps	PlaneExtraction.cpp	/^	Eigen::Vector3d PlaneExtraction::normal2pps(Eigen::Vector3d normal, Eigen::Vector3d point)$/;"	f	class:sun::PlaneExtraction	signature:(Eigen::Vector3d normal, Eigen::Vector3d point)
pps2normal	PlaneExtraction.cpp	/^	Eigen::Vector3d PlaneExtraction::pps2normal(Eigen::Vector3d pps)$/;"	f	class:sun::PlaneExtraction	signature:(Eigen::Vector3d pps)
push_point	PlaneExtraction.cpp	/^	void Cells_bottom::push_point(Point point_tmp, int inlier)$/;"	f	class:sun::Cells_bottom	signature:(Point point_tmp, int inlier)
rotation_plane2camera	PlaneFilter.cpp	/^	Eigen::Matrix3d PlaneFilter::rotation_plane2camera(Eigen::Vector3d n)$/;"	f	class:sun::PlaneFilter	signature:(Eigen::Vector3d n)
seeGrid	PlaneExtraction_RANSAC.cpp	/^	void PlaneExtraction_RANSAC::seeGrid()$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:()
setNormalEstimation	DataReading.cpp	/^	void DataReading::setNormalEstimation(double radius)$/;"	f	class:sun::DataReading	signature:(double radius)
setNormalEstimation	DataReading.cpp	/^	void DataReading::setNormalEstimation(int k)$/;"	f	class:sun::DataReading	signature:(int k)
setNormalEstimation	DataReading.cpp	/^	void DataReading::setNormalEstimation(pcl::IntegralImageNormalEstimation<pcl::PointXYZRGBA, $/;"	f	class:sun::DataReading	signature:(pcl::IntegralImageNormalEstimation<pcl::PointXYZRGBA, pcl::Normal>::NormalEstimationMethod method, float MaxDepthChangeFactor, float NormalSmoothingSize)
setParent	PlaneMatching_Interptree.cpp	/^	void Node_InterpTree::setParent(Node_InterpTree *node)$/;"	f	class:sun::Node_InterpTree	signature:(Node_InterpTree *node)
setPointPairs	CameraPoseEstimation_ShadowSM.cpp	/^	void CameraPoseEstimation_ShadowSM::setPointPairs()$/;"	f	class:sun::CameraPoseEstimation_ShadowSM	signature:()
showScans	MapIncremental.cpp	/^	void MapIncremental::showScans()$/;"	f	class:sun::MapIncremental	signature:()
sun	Basics.cpp	/^namespace sun$/;"	n	file:
sun	CameraPoseEstimation.cpp	/^namespace sun$/;"	n	file:
sun	CameraPoseEstimation_PlaneParas.cpp	/^namespace sun$/;"	n	file:
sun	CameraPoseEstimation_ShadowSM.cpp	/^namespace sun$/;"	n	file:
sun	DataReading.cpp	/^namespace sun$/;"	n	file:
sun	MapIncremental.cpp	/^namespace sun$/;"	n	file:
sun	PlaneExtraction.cpp	/^namespace sun$/;"	n	file:
sun	PlaneExtraction_RANSAC.cpp	/^namespace sun$/;"	n	file:
sun	PlaneFilter.cpp	/^namespace sun$/;"	n	file:
sun	PlaneMatching.cpp	/^namespace sun$/;"	n	file:
sun	PlaneMatching_Interptree.cpp	/^namespace sun$/;"	n	file:
sun::CameraPoseEstimation::CameraPoseEstimation	CameraPoseEstimation.cpp	/^	CameraPoseEstimation::CameraPoseEstimation()$/;"	f	class:sun::CameraPoseEstimation	signature:()
sun::CameraPoseEstimation::compute_H	CameraPoseEstimation.cpp	/^	void CameraPoseEstimation::compute_H()$/;"	f	class:sun::CameraPoseEstimation	signature:()
sun::CameraPoseEstimation::constraint_case	CameraPoseEstimation.cpp	/^	CameraPoseEstimation::ConstraintCase CameraPoseEstimation::constraint_case()$/;"	f	class:sun::CameraPoseEstimation	signature:()
sun::CameraPoseEstimation::~CameraPoseEstimation	CameraPoseEstimation.cpp	/^	CameraPoseEstimation::~CameraPoseEstimation()$/;"	f	class:sun::CameraPoseEstimation	signature:()
sun::CameraPoseEstimation_PlaneParas::CameraPoseEstimation_PlaneParas	CameraPoseEstimation_PlaneParas.cpp	/^	CameraPoseEstimation_PlaneParas::CameraPoseEstimation_PlaneParas()$/;"	f	class:sun::CameraPoseEstimation_PlaneParas	signature:()
sun::CameraPoseEstimation_PlaneParas::Pose2AlignPlanes	CameraPoseEstimation_PlaneParas.cpp	/^	void CameraPoseEstimation_PlaneParas::Pose2AlignPlanes()$/;"	f	class:sun::CameraPoseEstimation_PlaneParas	signature:()
sun::CameraPoseEstimation_PlaneParas::~CameraPoseEstimation_PlaneParas	CameraPoseEstimation_PlaneParas.cpp	/^	CameraPoseEstimation_PlaneParas::~CameraPoseEstimation_PlaneParas()$/;"	f	class:sun::CameraPoseEstimation_PlaneParas	signature:()
sun::CameraPoseEstimation_ShadowSM::CameraPoseEstimation_ShadowSM	CameraPoseEstimation_ShadowSM.cpp	/^	CameraPoseEstimation_ShadowSM::CameraPoseEstimation_ShadowSM()$/;"	f	class:sun::CameraPoseEstimation_ShadowSM	signature:()
sun::CameraPoseEstimation_ShadowSM::WhatCauseShadow	CameraPoseEstimation_ShadowSM.cpp	/^	void CameraPoseEstimation_ShadowSM::WhatCauseShadow()$/;"	f	class:sun::CameraPoseEstimation_ShadowSM	signature:()
sun::CameraPoseEstimation_ShadowSM::loadDepthMap	CameraPoseEstimation_ShadowSM.cpp	/^	void CameraPoseEstimation_ShadowSM::loadDepthMap(pcl::PointCloud<pcl::PointXYZRGBA>::Ptr point_cloud)$/;"	f	class:sun::CameraPoseEstimation_ShadowSM	signature:(pcl::PointCloud<pcl::PointXYZRGBA>::Ptr point_cloud)
sun::CameraPoseEstimation_ShadowSM::setPointPairs	CameraPoseEstimation_ShadowSM.cpp	/^	void CameraPoseEstimation_ShadowSM::setPointPairs()$/;"	f	class:sun::CameraPoseEstimation_ShadowSM	signature:()
sun::CameraPoseEstimation_ShadowSM::~CameraPoseEstimation_ShadowSM	CameraPoseEstimation_ShadowSM.cpp	/^	CameraPoseEstimation_ShadowSM::~CameraPoseEstimation_ShadowSM()$/;"	f	class:sun::CameraPoseEstimation_ShadowSM	signature:()
sun::Cells_bottom::Cells_bottom	PlaneExtraction.cpp	/^	Cells_bottom::Cells_bottom(int theta, int phy, int d)$/;"	f	class:sun::Cells_bottom	signature:(int theta, int phy, int d)
sun::Cells_bottom::ComputeCellAttribute	PlaneExtraction.cpp	/^	void Cells_bottom::ComputeCellAttribute(Eigen::Matrix3d Rotation2eigen)$/;"	f	class:sun::Cells_bottom	signature:(Eigen::Matrix3d Rotation2eigen)
sun::Cells_bottom::SortCells	PlaneExtraction.cpp	/^	void Cells_bottom::SortCells()$/;"	f	class:sun::Cells_bottom	signature:()
sun::Cells_bottom::push_point	PlaneExtraction.cpp	/^	void Cells_bottom::push_point(Point point_tmp, int inlier)$/;"	f	class:sun::Cells_bottom	signature:(Point point_tmp, int inlier)
sun::DataReading::DataReading	DataReading.cpp	/^	DataReading::DataReading(const std::string f): freiburg(f)$/;"	f	class:sun::DataReading	signature:(const std::string f)
sun::DataReading::Initialize_freiburg	DataReading.cpp	/^	void DataReading::Initialize_freiburg(double time_start)$/;"	f	class:sun::DataReading	signature:(double time_start)
sun::DataReading::LoadData_freiburg	DataReading.cpp	/^	void DataReading::LoadData_freiburg()$/;"	f	class:sun::DataReading	signature:()
sun::DataReading::SampleDataset_freiburg	DataReading.cpp	/^	void DataReading::SampleDataset_freiburg()$/;"	f	class:sun::DataReading	signature:()
sun::DataReading::setNormalEstimation	DataReading.cpp	/^	void DataReading::setNormalEstimation(double radius)$/;"	f	class:sun::DataReading	signature:(double radius)
sun::DataReading::setNormalEstimation	DataReading.cpp	/^	void DataReading::setNormalEstimation(int k)$/;"	f	class:sun::DataReading	signature:(int k)
sun::DataReading::setNormalEstimation	DataReading.cpp	/^	void DataReading::setNormalEstimation(pcl::IntegralImageNormalEstimation<pcl::PointXYZRGBA, $/;"	f	class:sun::DataReading	signature:(pcl::IntegralImageNormalEstimation<pcl::PointXYZRGBA, pcl::Normal>::NormalEstimationMethod method, float MaxDepthChangeFactor, float NormalSmoothingSize)
sun::DataReading::~DataReading	DataReading.cpp	/^	DataReading::~DataReading()$/;"	f	class:sun::DataReading	signature:()
sun::EularAngles2Rotation	Basics.cpp	/^	void EularAngles2Rotation(Eigen::Vector3d &Eulars, Eigen::Matrix3d &Rotation)$/;"	f	namespace:sun	signature:(Eigen::Vector3d &Eulars, Eigen::Matrix3d &Rotation)
sun::InterpTree::Clear	PlaneMatching_Interptree.cpp	/^	void InterpTree::Clear()$/;"	f	class:sun::InterpTree	signature:()
sun::InterpTree::Construct	PlaneMatching_Interptree.cpp	/^	bool InterpTree::Construct(std::vector<Plane*> &planes_ref_,std::vector<Plane*> &planes_cur_)$/;"	f	class:sun::InterpTree	signature:(std::vector<Plane*> &planes_ref_,std::vector<Plane*> &planes_cur_)
sun::InterpTree::InterpTree	PlaneMatching_Interptree.cpp	/^	InterpTree::InterpTree()$/;"	f	class:sun::InterpTree	signature:()
sun::InterpTree::consistent_1	PlaneMatching_Interptree.cpp	/^	bool InterpTree::consistent_1(Node_InterpTree *node)$/;"	f	class:sun::InterpTree	signature:(Node_InterpTree *node)
sun::InterpTree::consistent_2	PlaneMatching_Interptree.cpp	/^	bool InterpTree::consistent_2(Node_InterpTree *node1, Node_InterpTree *node2)$/;"	f	class:sun::InterpTree	signature:(Node_InterpTree *node1, Node_InterpTree *node2)
sun::InterpTree::consistent_3	PlaneMatching_Interptree.cpp	/^	bool InterpTree::consistent_3(Node_InterpTree *node1, Node_InterpTree *node2, Node_InterpTree *node3)$/;"	f	class:sun::InterpTree	signature:(Node_InterpTree *node1, Node_InterpTree *node2, Node_InterpTree *node3)
sun::InterpTree::isLeaf	PlaneMatching_Interptree.cpp	/^	bool InterpTree::isLeaf(Node_InterpTree *node)$/;"	f	class:sun::InterpTree	signature:(Node_InterpTree *node)
sun::InterpTree::~InterpTree	PlaneMatching_Interptree.cpp	/^	InterpTree::~InterpTree()$/;"	f	class:sun::InterpTree	signature:()
sun::MapIncremental::MapIncremental	MapIncremental.cpp	/^	MapIncremental::MapIncremental()$/;"	f	class:sun::MapIncremental	signature:()
sun::MapIncremental::addScan	MapIncremental.cpp	/^	void MapIncremental::addScan(pcl::PointCloud<pcl::PointXYZRGBA>::Ptr point_cloud, CameraPose Rt)$/;"	f	class:sun::MapIncremental	signature:(pcl::PointCloud<pcl::PointXYZRGBA>::Ptr point_cloud, CameraPose Rt)
sun::MapIncremental::showScans	MapIncremental.cpp	/^	void MapIncremental::showScans()$/;"	f	class:sun::MapIncremental	signature:()
sun::MapIncremental::~MapIncremental	MapIncremental.cpp	/^	MapIncremental::~MapIncremental()$/;"	f	class:sun::MapIncremental	signature:()
sun::Node_InterpTree::Node_InterpTree	PlaneMatching_Interptree.cpp	/^	Node_InterpTree::Node_InterpTree()$/;"	f	class:sun::Node_InterpTree	signature:()
sun::Node_InterpTree::Node_InterpTree	PlaneMatching_Interptree.cpp	/^	Node_InterpTree::Node_InterpTree(Plane *plane_ref_, Plane *plane_cur_)$/;"	f	class:sun::Node_InterpTree	signature:(Plane *plane_ref_, Plane *plane_cur_)
sun::Node_InterpTree::insertChild	PlaneMatching_Interptree.cpp	/^	void Node_InterpTree::insertChild(Node_InterpTree *node)$/;"	f	class:sun::Node_InterpTree	signature:(Node_InterpTree *node)
sun::Node_InterpTree::setParent	PlaneMatching_Interptree.cpp	/^	void Node_InterpTree::setParent(Node_InterpTree *node)$/;"	f	class:sun::Node_InterpTree	signature:(Node_InterpTree *node)
sun::PlaneExtraction::LoadPoints	PlaneExtraction.cpp	/^	bool PlaneExtraction::LoadPoints()$/;"	f	class:sun::PlaneExtraction	signature:()
sun::PlaneExtraction::computePlaneParas	PlaneExtraction.cpp	/^	void PlaneExtraction::computePlaneParas(Plane *plane)$/;"	f	class:sun::PlaneExtraction	signature:(Plane *plane)
sun::PlaneExtraction::normal2pps	PlaneExtraction.cpp	/^	Eigen::Vector3d PlaneExtraction::normal2pps(Eigen::Vector3d normal, Eigen::Vector3d point)$/;"	f	class:sun::PlaneExtraction	signature:(Eigen::Vector3d normal, Eigen::Vector3d point)
sun::PlaneExtraction::pps2normal	PlaneExtraction.cpp	/^	Eigen::Vector3d PlaneExtraction::pps2normal(Eigen::Vector3d pps)$/;"	f	class:sun::PlaneExtraction	signature:(Eigen::Vector3d pps)
sun::PlaneExtraction::~PlaneExtraction	PlaneExtraction.cpp	/^	PlaneExtraction::~PlaneExtraction()$/;"	f	class:sun::PlaneExtraction	signature:()
sun::PlaneExtraction_RANSAC::ExtractPlanes	PlaneExtraction_RANSAC.cpp	/^	void PlaneExtraction_RANSAC::ExtractPlanes()$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:()
sun::PlaneExtraction_RANSAC::PlaneExtraction_RANSAC	PlaneExtraction_RANSAC.cpp	/^	PlaneExtraction_RANSAC::PlaneExtraction_RANSAC()$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:()
sun::PlaneExtraction_RANSAC::computePlaneAvgCov	PlaneExtraction_RANSAC.cpp	/^	void PlaneExtraction_RANSAC::computePlaneAvgCov(Plane *plane)$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:(Plane *plane)
sun::PlaneExtraction_RANSAC::dist_point2plane	PlaneExtraction_RANSAC.cpp	/^	double PlaneExtraction_RANSAC::dist_point2plane(Eigen::Vector3d point, pcl::ModelCoefficients::Ptr plane)$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:(Eigen::Vector3d point, pcl::ModelCoefficients::Ptr plane)
sun::PlaneExtraction_RANSAC::fusePlanes	PlaneExtraction_RANSAC.cpp	/^	void PlaneExtraction_RANSAC::fusePlanes(int i_plane, Plane *tmp_plane)$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:(int i_plane, Plane *tmp_plane)
sun::PlaneExtraction_RANSAC::seeGrid	PlaneExtraction_RANSAC.cpp	/^	void PlaneExtraction_RANSAC::seeGrid()$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:()
sun::PlaneExtraction_RANSAC::unifyPlaneDir	PlaneExtraction_RANSAC.cpp	/^	void PlaneExtraction_RANSAC::unifyPlaneDir(pcl::ModelCoefficients::Ptr plane)$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:(pcl::ModelCoefficients::Ptr plane)
sun::PlaneExtraction_RANSAC::~PlaneExtraction_RANSAC	PlaneExtraction_RANSAC.cpp	/^	PlaneExtraction_RANSAC::~PlaneExtraction_RANSAC()$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:()
sun::PlaneFilter::CenterWeight	PlaneFilter.cpp	/^	double PlaneFilter::CenterWeight(Pixel index)$/;"	f	class:sun::PlaneFilter	signature:(Pixel index)
sun::PlaneFilter::ColorFilter	PlaneFilter.cpp	/^	void PlaneFilter::ColorFilter()$/;"	f	class:sun::PlaneFilter	signature:()
sun::PlaneFilter::ColorResponse	PlaneFilter.cpp	/^	double PlaneFilter::ColorResponse(Pixel index, Eigen::MatrixXd temp_color)$/;"	f	class:sun::PlaneFilter	signature:(Pixel index, Eigen::MatrixXd temp_color)
sun::PlaneFilter::DensityFilter	PlaneFilter.cpp	/^	void PlaneFilter::DensityFilter()$/;"	f	class:sun::PlaneFilter	signature:()
sun::PlaneFilter::DensityResponse	PlaneFilter.cpp	/^	double PlaneFilter::DensityResponse(Pixel index, Eigen::MatrixXd temp_density)$/;"	f	class:sun::PlaneFilter	signature:(Pixel index, Eigen::MatrixXd temp_density)
sun::PlaneFilter::DepthWeight	PlaneFilter.cpp	/^	double PlaneFilter::DepthWeight(Pixel index)$/;"	f	class:sun::PlaneFilter	signature:(Pixel index)
sun::PlaneFilter::EdgeFilter	PlaneFilter.cpp	/^	void PlaneFilter::EdgeFilter()$/;"	f	class:sun::PlaneFilter	signature:()
sun::PlaneFilter::EdgeResponse	PlaneFilter.cpp	/^	double PlaneFilter::EdgeResponse(Pixel index, Eigen::MatrixXd temp_edge)$/;"	f	class:sun::PlaneFilter	signature:(Pixel index, Eigen::MatrixXd temp_edge)
sun::PlaneFilter::PlaneFilter	PlaneFilter.cpp	/^	PlaneFilter::PlaneFilter()$/;"	f	class:sun::PlaneFilter	signature:()
sun::PlaneFilter::color2grey	PlaneFilter.cpp	/^	void PlaneFilter::color2grey()$/;"	f	class:sun::PlaneFilter	signature:()
sun::PlaneFilter::filter	PlaneFilter.cpp	/^	void PlaneFilter::filter(Plane *plane)$/;"	f	class:sun::PlaneFilter	signature:(Plane *plane)
sun::PlaneFilter::loadPlane	PlaneFilter.cpp	/^	void PlaneFilter::loadPlane(Plane *plane)$/;"	f	class:sun::PlaneFilter	signature:(Plane *plane)
sun::PlaneFilter::rotation_plane2camera	PlaneFilter.cpp	/^	Eigen::Matrix3d PlaneFilter::rotation_plane2camera(Eigen::Vector3d n)$/;"	f	class:sun::PlaneFilter	signature:(Eigen::Vector3d n)
sun::PlaneFilter::~PlaneFilter	PlaneFilter.cpp	/^	PlaneFilter::~PlaneFilter()$/;"	f	class:sun::PlaneFilter	signature:()
sun::PlaneMatching::PlaneMatching	PlaneMatching.cpp	/^	PlaneMatching::PlaneMatching()$/;"	f	class:sun::PlaneMatching	signature:()
sun::PlaneMatching::loadPlanes	PlaneMatching.cpp	/^	void PlaneMatching::loadPlanes(std::vector<Plane*> _planes_ref, std::vector<Plane*> _planes_cur)$/;"	f	class:sun::PlaneMatching	signature:(std::vector<Plane*> _planes_ref, std::vector<Plane*> _planes_cur)
sun::PlaneMatching::~PlaneMatching	PlaneMatching.cpp	/^	PlaneMatching::~PlaneMatching()$/;"	f	class:sun::PlaneMatching	signature:()
sun::PlaneMatching_Interptree::Match	PlaneMatching_Interptree.cpp	/^	void PlaneMatching_Interptree::Match(std::vector<PlanePair> &matched_planes)$/;"	f	class:sun::PlaneMatching_Interptree	signature:(std::vector<PlanePair> &matched_planes)
sun::PlaneMatching_Interptree::PlaneMatching_Interptree	PlaneMatching_Interptree.cpp	/^	PlaneMatching_Interptree::PlaneMatching_Interptree()$/;"	f	class:sun::PlaneMatching_Interptree	signature:()
sun::PlaneMatching_Interptree::~PlaneMatching_Interptree	PlaneMatching_Interptree.cpp	/^	PlaneMatching_Interptree::~PlaneMatching_Interptree()$/;"	f	class:sun::PlaneMatching_Interptree	signature:()
sun::Rotation2EularAngles	Basics.cpp	/^	void Rotation2EularAngles(Eigen::Matrix3d &Rotation, Eigen::Vector3d &Eulars)$/;"	f	namespace:sun	signature:(Eigen::Matrix3d &Rotation, Eigen::Vector3d &Eulars)
unifyPlaneDir	PlaneExtraction_RANSAC.cpp	/^	void PlaneExtraction_RANSAC::unifyPlaneDir(pcl::ModelCoefficients::Ptr plane)$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:(pcl::ModelCoefficients::Ptr plane)
~CameraPoseEstimation	CameraPoseEstimation.cpp	/^	CameraPoseEstimation::~CameraPoseEstimation()$/;"	f	class:sun::CameraPoseEstimation	signature:()
~CameraPoseEstimation_PlaneParas	CameraPoseEstimation_PlaneParas.cpp	/^	CameraPoseEstimation_PlaneParas::~CameraPoseEstimation_PlaneParas()$/;"	f	class:sun::CameraPoseEstimation_PlaneParas	signature:()
~CameraPoseEstimation_ShadowSM	CameraPoseEstimation_ShadowSM.cpp	/^	CameraPoseEstimation_ShadowSM::~CameraPoseEstimation_ShadowSM()$/;"	f	class:sun::CameraPoseEstimation_ShadowSM	signature:()
~DataReading	DataReading.cpp	/^	DataReading::~DataReading()$/;"	f	class:sun::DataReading	signature:()
~InterpTree	PlaneMatching_Interptree.cpp	/^	InterpTree::~InterpTree()$/;"	f	class:sun::InterpTree	signature:()
~MapIncremental	MapIncremental.cpp	/^	MapIncremental::~MapIncremental()$/;"	f	class:sun::MapIncremental	signature:()
~PlaneExtraction	PlaneExtraction.cpp	/^	PlaneExtraction::~PlaneExtraction()$/;"	f	class:sun::PlaneExtraction	signature:()
~PlaneExtraction_RANSAC	PlaneExtraction_RANSAC.cpp	/^	PlaneExtraction_RANSAC::~PlaneExtraction_RANSAC()$/;"	f	class:sun::PlaneExtraction_RANSAC	signature:()
~PlaneFilter	PlaneFilter.cpp	/^	PlaneFilter::~PlaneFilter()$/;"	f	class:sun::PlaneFilter	signature:()
~PlaneMatching	PlaneMatching.cpp	/^	PlaneMatching::~PlaneMatching()$/;"	f	class:sun::PlaneMatching	signature:()
~PlaneMatching_Interptree	PlaneMatching_Interptree.cpp	/^	PlaneMatching_Interptree::~PlaneMatching_Interptree()$/;"	f	class:sun::PlaneMatching_Interptree	signature:()
